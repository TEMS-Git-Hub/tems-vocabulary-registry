#!/usr/bin/env python3
import pathlib
from collections import defaultdict

REPO_ROOT = pathlib.Path(".").resolve()
DATA_SPACES = ["tems", "tamis"]
SECTIONS = ["ontologies", "shapes", "indexes", "policies"]

ONTO_EXTS = {".ttl", ".jsonld", ".rdf", ".owl", ".xml", ".n3", ".nt"}

def rglob_files(root: pathlib.Path):
    for p in sorted(root.rglob("*")):
        if p.is_file():
            yield p

def md_escape(s: str) -> str:
    return s.replace("|", "\\|")

def rel_link_from_space(space_root: pathlib.Path, abs_path: pathlib.Path) -> str:
    # ./indexes/foo.jsonld etc. (relative to tems/ or tamis/)
    return "./" + abs_path.relative_to(space_root).as_posix()

def build_ontologies_table(space_root: pathlib.Path) -> str:
    ont_root = space_root / "ontologies"
    if not ont_root.exists():
        return "_(none found)_"
    groups = defaultdict(list)  # (name, version) -> [file]
    for f_abs in rglob_files(ont_root):
        if f_abs.suffix.lower() not in ONTO_EXTS:
            continue
        parts = f_abs.relative_to(space_root).parts  # ('ontologies','core','V0.1.0','core.ttl')
        if len(parts) < 2:
            continue
        name = parts[1] if len(parts) > 1 else "unknown"
        version = parts[2] if len(parts) > 2 and parts[2].lower().startswith("v") else "â€”"
        groups[(name, version)].append(f_abs)
    if not groups:
        return "_(none found)_"
    rows = ["| Ontology | Version | Files |", "|---|---:|---|"]
    for (name, version), files in sorted(groups.items()):
        links = [
            f"[{md_escape(f.name)}]({rel_link_from_space(space_root, f)})"
            for f in sorted(files)
        ]
        rows.append(f"| {md_escape(name)} | {md_escape(version)} | {', '.join(links)} |")
    return "\n".join(rows)

def build_simple_table(space_root: pathlib.Path, section: str) -> str:
    sec_root = space_root / section
    if not sec_root.exists():
        return "_(none found)_"
    files = [f for f in rglob_files(sec_root) if f.name.lower() != "readme.md"]
    if not files:
        return "_(none found)_"
    rows = ["| File | Path |", "|---|---|"]
    for f in sorted(files):
        rel = rel_link_from_space(space_root, f)
        rows.append(f"| {md_escape(f.name)} | [{md_escape(rel[2:])}]({rel}) |")
    return "\n".join(rows)

def build_full_readme(space: str, space_root: pathlib.Path) -> str:
    return (
        f"# {space.upper()} assets\n\n"
        f"This page is auto-generated by CI.\n\n"
        f"## Ontologies\n{build_ontologies_table(space_root)}\n\n"
        f"## Shapes\n{build_simple_table(space_root, 'shapes')}\n\n"
        f"## Indexes\n{build_simple_table(space_root, 'indexes')}\n\n"
        f"## Policies\n{build_simple_table(space_root, 'policies')}\n"
    )

def main():
    for space in DATA_SPACES:
        space_root = REPO_ROOT / space
        space_root.mkdir(exist_ok=True)
        readme = build_full_readme(space, space_root)
        (space_root / "README.md").write_text(readme, encoding="utf-8")
    return 0

if __name__ == "__main__":
    raise SystemExit(main())
